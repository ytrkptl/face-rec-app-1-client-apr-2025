rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules


    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isLoggedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function checkAuthAndUid(userId) {
      return isLoggedIn() && isOwner(userId);
    }

    // Users collection
    match /users/{userId} {
      allow read: if checkAuthAndUid(userId);
      allow write: if checkAuthAndUid(userId);
      allow update: if checkAuthAndUid(userId);
    }

    // ImageCoordinates collection
    match /imageCoordinates/{docId} {
      allow create: if isLoggedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'imageUrl', 'coordinates', 'timestamp']);
      
      allow read: if isLoggedIn() 
        && resource.data.userId == request.auth.uid;
      
      allow delete: if isLoggedIn() 
        && resource.data.userId == request.auth.uid;
    }

    // Errors collection
    match /errors/{document=**} {
      allow read: if isLoggedIn();
      allow write: if isLoggedIn();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
